{"version":3,"sources":["pages/LeaderboardPage/fragments/_CardFragment.js","pages/LeaderboardPage/index.js"],"names":["CardFragment","user","place","className","name","style","backgroundImage","avatarURL","Object","entries","stats","map","key","value","charAt","toUpperCase","slice","LeaderboardPage","connect","users","usersRequest","users_request","questionRequest","bestUsers","useMemo","length","forEach","answered","keys","answers","created","questions","push","scores","sort","a","b","index","id"],"mappings":"oNAIO,MAAMA,EAAe,EAAGC,OAAMC,WACnC,sBAAKC,UAAU,mBAAf,UACE,sBAAKA,UAAU,yBAAf,UACE,qBAAKA,UAAU,+BAAf,SAA+CF,EAAKG,OACpD,qBACED,UAAU,iCACVE,MAAO,CACLC,gBAAgB,OAAD,OAASL,EAAKM,UAAd,WAKpBC,OAAOC,QAAQR,EAAKS,OAAOC,KAAI,EAAEC,EAAKC,KACrC,sBAAKV,UAAU,yBAAf,UACE,qBAAKA,UAAU,gCAAf,mBAAmDS,EAChDE,OAAO,GACPC,eAFH,OAEmBH,EAAII,MAAM,MAC7B,qBAAKb,UAAU,gCAAf,SACE,4BAAIU,QALqCD,KAU/C,qBAAKT,UAAU,0BAAf,SACE,uCAAQD,U,kBCrBd,MAgDMe,EAAkBC,aALA,EAAGC,YAAH,CACtBA,MAAOA,EAAMA,MACbC,aAAcD,EAAME,iBAG2B,KAAzBH,EAhDC,EAAGC,QAAOC,eAAcE,sBAC/C,MAAMC,EAAYC,mBAAQ,KACxB,MAAMD,EAAY,GAsBlB,OApBIJ,EAAMM,OAAS,IACjBN,EAAMO,SAASzB,IACb,MAAM0B,EAAWnB,OAAOoB,KAAK3B,EAAK4B,SAASJ,OACrCK,EAAU7B,EAAK8B,UAAUN,OAE/BF,EAAUS,KAAV,2BACK/B,GADL,IAEES,MAAO,CACLiB,WACAG,UACAG,OAAQN,EAAWG,SAKzBP,EAAUW,MAAK,CAACC,EAAGC,IACVA,EAAE1B,MAAMuB,OAASE,EAAEzB,MAAMuB,UAI7BV,IACN,CAACJ,IAEJ,OAAIC,GAAgBE,EACX,cAAC,IAAD,IAIP,sBAAKnB,UAAU,mBAAf,UACE,qBAAKA,UAAU,0BAAf,0BACA,qBAAKA,UAAU,4BAAf,SACGoB,EAAUZ,KAAI,CAACV,EAAMoC,IACpB,cAACrC,EAAD,CAA4BC,KAAMA,EAAMC,MAAOmC,EAAQ,GAApCpC,EAAKqC,cAcnBrB","file":"static/js/3.686df43c.chunk.js","sourcesContent":["import React from 'react';\n\nimport './_card_fragment.scss';\n\nexport const CardFragment = ({ user, place }) => (\n  <div className=\"leaderboard_card\">\n    <div className=\"leaderboard_card__user\">\n      <div className=\"leaderboard_card__user__name\">{user.name}</div>\n      <div\n        className=\"leaderboard_card__user__avatar\"\n        style={{\n          backgroundImage: `url(${user.avatarURL})`,\n        }}\n      ></div>\n    </div>\n\n    {Object.entries(user.stats).map(([key, value]) => (\n      <div className=\"leaderboard_card__stat\" key={key}>\n        <div className=\"leaderboard_card__stat__title\">{`${key\n          .charAt(0)\n          .toUpperCase()}${key.slice(1)}`}</div>\n        <div className=\"leaderboard_card__stat__value\">\n          <p>{value}</p>\n        </div>\n      </div>\n    ))}\n\n    <div className=\"leaderboard_card__score\">\n      <p>{`#${place}`}</p>\n    </div>\n  </div>\n);\n","import React, { useMemo } from 'react';\nimport { connect } from 'react-redux';\n\nimport { CardFragment } from './fragments';\nimport { Preloader } from '../../components';\nimport './index.scss';\n\nconst _LeaderboardPage = ({ users, usersRequest, questionRequest }) => {\n  const bestUsers = useMemo(() => {\n    const bestUsers = [];\n\n    if (users.length > 0) {\n      users.forEach((user) => {\n        const answered = Object.keys(user.answers).length;\n        const created = user.questions.length;\n\n        bestUsers.push({\n          ...user,\n          stats: {\n            answered,\n            created,\n            scores: answered + created,\n          },\n        });\n      });\n\n      bestUsers.sort((a, b) => {\n        return b.stats.scores - a.stats.scores;\n      });\n    }\n\n    return bestUsers;\n  }, [users]);\n\n  if (usersRequest || questionRequest) {\n    return <Preloader />;\n  }\n\n  return (\n    <div className=\"leaderboard_page\">\n      <div className=\"leaderboard_page__title\">Leader Board</div>\n      <div className=\"leaderboard_page__content\">\n        {bestUsers.map((user, index) => (\n          <CardFragment key={user.id} user={user} place={index + 1} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ users }) => ({\n  users: users.users,\n  usersRequest: users.users_request,\n});\n\nconst LeaderboardPage = connect(mapStateToProps, null)(_LeaderboardPage);\n\nexport default LeaderboardPage;\n"],"sourceRoot":""}